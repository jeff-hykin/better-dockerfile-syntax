require_relative '../../../directory'
require_relative PathFor[:repo_helper]
require_relative PathFor[:textmate_tools]
require_relative PathFor[:sharedPattern]["numeric"]
require_relative PathFor[:sharedPattern]["variable"]
require_relative './tokens.rb'

# 
# Setup grammar
# 
    grammar = Grammar.new(
        name: "Dockerfile",
        scope_name: "source.dockerfile",
        file_types: [
            "dockerfile",
        ],
        version: "",
        information_for_contributors: [
            "This code was auto generated by a much-more-readble ruby file",
            "see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master",
        ],
    )

#
#
# Contexts
#
#
    grammar[:$initial_context] = [
            :commands,
            :escape,
            :variable,
            :comments,
            :strings,
        ]
#
#
# Patterns
#
#
    # 
    # String
    # 
        grammar[:strings] = [
            :string_single,
            :string_double,
        ]
        grammar[:escape] = newPattern(
            match: /\\./,
            tag_as: "constant.character.escaped"
        )
        grammar[:string_single] = PatternRange.new(
            tag_as: "string.quoted.single",
            start_pattern: newPattern(
                match: /'/,
                tag_as: "punctuation.definition.string.begin",
            ),
            end_pattern: newPattern(
                match: /'/,
                tag_as: "punctuation.definition.string.end",
            ),
            includes: [ :escape, :variable ]
        )
        grammar[:string_double] = PatternRange.new(
            tag_as: "string.quoted.double",
            start_pattern: newPattern(
                match: /"/,
                tag_as: "punctuation.definition.string.begin",
            ),
            end_pattern: newPattern(
                match: /"/,
                tag_as: "punctuation.definition.string.end",
            ),
            includes: [ :escape, :variable ]
        )
    # 
    # Comment
    # 
        grammar[:comments] = newPattern(
            /^\s*+/.then(
                match: /#/,
                tag_as: "comment.line.number-sign punctuation.definition.comment",
            ).then(
                match: /.*$/,
                tag_as: "comment.line.number-sign"
            )
        )
    # 
    # variable
    # 
        grammar[:variable] = newPattern(
            newPattern(
                match: /\$/,
                tag_as: "punctuation.definition.variable variable.other"
            ).then(
                match: /\w+/,
                tag_as: "variable.other",
            )
        )
    # 
    # Normal Commands 
    # 
        grammar[:commands] = [
            :run_statement,
            :from_statement,
            newPattern(
                /^\s*+/.maybe(
                    newPattern(
                        match: /(?i:ONBUILD)/,
                        tag_as: "keyword.control.onbuild",
                    ).then(/\s++/)
                ).then(
                    match: /(?i:CMD|ENTRYPOINT|ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|HEALTHCHECK|LABEL|MAINTAINER|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)/,
                    tag_as: "keyword.other.special-method.$match"
                ).then(/\s/)
            )
        ]
    # 
    # FROM
    # 
        # see https://docs.docker.com/engine/reference/builder/
            # syntax=docker/dockerfile
            # syntax=docker/dockerfile:1.0
            # syntax=docker.io/docker/dockerfile:1
            # syntax=docker/dockerfile:1.0.0-experimental
            # syntax=example.com/user/repo:tag@sha256:abcdef...
        grammar[:from_statement] = newPattern(
            newPattern(
                match: /(?i:FROM)/,
                tag_as: "keyword.other.special-method.from"
            ).then(/\s+/).then(
                match: /[^\s]+/,
                includes: [
                    # tag the image
                    newPattern(
                        match: /[^:@]+/,
                        tag_as: "entity.name.image"
                    ),
                    # tag the version
                    newPattern(
                        newPattern(
                            match: /\:/,
                            tag_as: "punctuation.separator.version constant.numeric.version",
                        ).then(
                            match: /\S++/,
                            tag_as: "constant.numeric.version"
                        )
                    ),
                    # tag the digest
                    newPattern(
                        newPattern(
                            match: /\@/,
                            tag_as: "punctuation.separator.version constant.constant.language.symbol.digest",
                        ).then(
                            match: /\S++/,
                            tag_as: "constant.constant.language.symbol.digest"
                        )
                    )
                ]
                
            ).maybe(
                /\s+/.then(
                    match: /(?i:AS)/,
                    tag_as: "keyword.other.special-method.as",
                ).then(/\s+/).then(
                    match: /[^\s]++/,
                    tag_as: "entity.name.image.stage",
                )
            )
        )
    
    # 
    # RUN
    #         
        # pull in the entire shell syntax
        grammar[:shell] = JSON.parse(IO.read(PathFor[:jsonSyntax]["shell"]))
        # allow the command call to have a word infront of it
        grammar[:shell]["repository"]["command_call"]["begin"] = "(?<=(?:^|;|\\||&|!|\\(|\\{|\\`|\\A|\\G))\\s*+(?!function\\W|function\\$|select\\W|select\\$|case\\W|case\\$|do\\W|do\\$|done\\W|done\\$|elif\\W|elif\\$|else\\W|else\\$|esac\\W|esac\\$|fi\\W|fi\\$|for\\W|for\\$|if\\W|if\\$|in\\W|in\\$|then\\W|then\\$|until\\W|until\\$|while\\W|while\\$|alias\\W|alias\\$|bg\\W|bg\\$|command\\W|command\\$|false\\W|false\\$|fc\\W|fc\\$|fg\\W|fg\\$|getopts\\W|getopts\\$|hash\\W|hash\\$|jobs\\W|jobs\\$|kill\\W|kill\\$|newgrp\\W|newgrp\\$|read\\W|read\\$|true\\W|true\\$|umask\\W|umask\\$|unalias\\W|unalias\\$|wait\\W|wait\\$)"
        # tell the shell syntax when it needs to end
        grammar[:shell]["patterns"][0]["end"] = lookBehindFor(/[^\\]\n/)
        
        
        grammar[:run_statement] = PatternRange.new(
            tag_content_as: "meta.command.run",
            start_pattern: newPattern(
                newPattern(
                    match: variableBounds(/RUN/),
                    tag_as: "keyword.other.special-method",
                # look to make sure the line gets extended at the end with a \
                )
            ),
            # while the line is beging extended with \
            # while: lookAheadFor(/^.+\\$/),
            end_pattern: lookBehindFor(/[^\\]\n/),
            includes: [
                :shell
            ]
        )
 
# Save
saveGrammar(grammar)