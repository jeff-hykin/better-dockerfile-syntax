adjective_modifiers: # words that are combinded with the adjectives to make theme-making easier
    - "relatedTo:"  # ex: the ()'s in a function call are not "the function" but they are relatedTo the function
    - "like:"       # ex: a macro with arguments is not a function, but for theming purposes, it is like a function 
    - "name:"       # ex: when you want to set the color of something very very specific, like only color the "if" keyword
1st_level_adjectives: # the main topics that are mixed with many things
    - literal        # numbers, strings, true, false etc
    - symbol         # e.g. the quotes in a string, or the backslashes or # in a comment
    - identifier     # anything that is a name (aka not symbols), this includes keywords, and does not include operators
    - keyword        # a word that is special in some way. There can be keyword functions, keyword variables, keyword literals, keyword operators, etc
    - operator       # a symbol or word, that performs computation (similar to a function), but does not have ()'s
    - punctuation    # e.g. ; or , it is a symbol that is used by the parser to understand the code, but doesn't do/cause computation at run time
    - comment
    - function       # an identifier that can be called/run/executed
    - variable       # an identifier that can contain data
2nd_level_ajectives: # more fine tune details 
    - modifier       # something that is used to change the way something else works, e.g. async, const, mutable. Most modifiers are also keywords
    - call           # any time something is being used rather than defined, a class-call would be considered
    - definition     # e.g. function-definition, class-definition, variable-definition, only applies in languages where a seperate definition is needed
    - member         # belongs to a object/class, e.g. a function-member, a variable-member
    - control_flow   # is related to non-linear flow, e.g. jumping around in the code: if, else, while, for, break, try, catch, goto
    - type           # the name of the class/category that a variable belongs too, e.g. string, float, double, array 
    - unit           # something that is appended/connected to a literal number to add (things can be both a unit and a type)
    - builtin        # something that could be user defined, but in this case is already defined by the language
    - exception      # is related to catching/handling errors
sub_categories: # these are typically only show up in combination with another adjective
    # variables
    - constant        # whenever the value of the variable cant be changed
    - self_reference  # e.g. this/self
    - enumeration     # a word that is a constant number
    - parameter       # the variable is one of the arguments in a function definition 
    # literals
    - non_value       # ex: null, undefined, nil, None, nullptr, etc
    - boolean         # true/false, yes/no, on/off
    - numeric         # a mathematical number
    - string          # some form of text
    - escape_sequence # text that will get converted into something else    
    # operators
    - assignment      # changing the value of an existing variable
    - comparison     # a kind of operator
    # 



# Examples:
    # to color the "0x" in "0x00001", use {"literal", "numeric", "modifier"}
# TODO: add more examples
# TODO: add all of the hyper-specific things 
# TODO: add more adjectives for css, latex, html, and markdown